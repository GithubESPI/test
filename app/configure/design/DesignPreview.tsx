"use client";

import Bulletin from "@/components/Bulletin";
import LoginModal from "@/components/LoginModal";
import { Button } from "@/components/ui/button";
import { Progress } from "@/components/ui/progress";
import { cn } from "@/lib/utils";
import { ArrowRight, LoaderCircle } from "lucide-react";
import { useSession } from "next-auth/react";
import { useEffect, useRef, useState } from "react";

// Fonction de journalisation d√©taill√©e
const log = (message: string, error: boolean = false) => {
  if (process.env.NODE_ENV === "development") {
    error ? console.error(message) : console.log(message);
  }
};

// V√©rification de l'acc√®s √† une URL
const checkUrlAccess = async (url: string): Promise<void> => {
  try {
    log(üîç V√©rification d'acc√®s √† l'URL: ${url});
    const response = await fetch(url, { method: "HEAD" });
    if (!response.ok) {
      throw new Error(‚õî Acc√®s refus√© √† l'URL: ${url});
    }
    log(‚úÖ Acc√®s confirm√©: ${url});
  } catch (error: unknown) {
    log(‚ùå Erreur d'acc√®s √† l'URL: ${url}, true);
    throw error;
  }
};

const DesignPreview = () => {
  const { data: session } = useSession();
  const sessionId = session?.user?.id ?? "";

  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);
  const [modalMessage, setModalMessage] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isSuccess, setIsSuccess] = useState<boolean | null>(null);
  const [progress, setProgress] = useState<number>(0);

  const websocketRef = useRef<WebSocket | null>(null);

  // Reconnexion WebSocket en cas d'√©chec
  const reconnectWebSocket = (sessionId: string) => {
    if (progress === 100) {
      log("‚úÖ Progression compl√®te, pas de reconnexion WebSocket.");
      return;
    }
    log("üîÑ Tentative de reconnexion au WebSocket...");
    setTimeout(() => initializeWebSocket(sessionId), 3000);
  };

  // Initialisation WebSocket
  const initializeWebSocket = (sessionId: string) => {
    if (progress === 100) return;
    if (websocketRef.current) {
      log("‚ö†Ô∏è WebSocket d√©j√† actif, pas de recr√©ation.");
      return;
    }

    const ws = new WebSocket(wss://bulletins-app.fly.dev/ws/progress/${sessionId});
    websocketRef.current = ws;
    log("üõú Connexion WebSocket initialis√©e.");

    ws.onopen = () => log("‚úÖ WebSocket connect√©.");
    ws.onmessage = (event) => {
      const data = JSON.parse(event.data);
      log(üì© WebSocket message re√ßu: ${JSON.stringify(data)});
      if (data.progress !== undefined) {
        setProgress(data.progress);
        setModalMessage(Progression: ${data.progress}%);
      }
      if (data.progress === 100) {
        log("‚úÖ WebSocket termin√© √† 100%, fermeture...");
        setModalMessage("‚úÖ G√©n√©ration termin√©e ! V√©rification du fichier...");
        ws.close();
      }
    };
    ws.onerror = (error) => log(‚ùå Erreur WebSocket: ${error}, true);
    ws.onclose = (event) => {
      log(‚ö†Ô∏è WebSocket ferm√©: ${event.code} (${event.reason}));
      if (!event.wasClean) reconnectWebSocket(sessionId);
    };
  };

  // V√©rification de la disponibilit√© du fichier ZIP
  const pollDownloadStatus = async () => {
    log("üì° D√©but de la v√©rification du fichier ZIP...");
    for (let attempt = 1; attempt <= 10; attempt++) {
      log(üîç Tentative ${attempt}/10 pour v√©rifier le fichier ZIP.);
      const response = await fetch(https://bulletins-app.fly.dev/download-zip/bulletins.zip, { method: "HEAD" });

      if (response.ok) {
        log("üì¶ Fichier ZIP disponible !");
        return true;
      }
      await new Promise((resolve) => setTimeout(resolve, 5000));
    }
    log("‚ùå Fichier ZIP indisponible apr√®s 10 tentatives.", true);
    return false;
  };

  const handleGenerate = async () => {
    setIsLoading(true);
    setIsModalOpen(true);
    setIsSuccess(null);
    setModalMessage("üì§ Envoi des fichiers au serveur...");
    log("üöÄ Lancement du processus de g√©n√©ration.");

    try {
      log("üì° R√©cup√©ration des documents depuis l'API Next.js...");
      const response = await fetch(/api/documents?userId=${sessionId});
      if (!response.ok) throw new Error(HTTP Error! Status: ${response.status});

      const data = await response.json();
      log(üìÇ Documents r√©cup√©r√©s: ${JSON.stringify(data)});

      await checkUrlAccess(data.excelUrl);
      await checkUrlAccess(data.wordUrl);

      log("üîå Connexion WebSocket...");
      initializeWebSocket(sessionId);
      setModalMessage("üìä Traitement en cours...");

      log("üì° Envoi des fichiers √† FastAPI...");
      const generateResponse = await fetch(https://bulletins-app.fly.dev/upload-and-integrate-excel-and-word, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ sessionId, excelUrl: data.excelUrl, wordUrl: data.wordUrl }),
      });

      if (!generateResponse.ok) throw new Error(await generateResponse.text());

      const generateData = await generateResponse.json();
      log(üìú R√©ponse FastAPI: ${JSON.stringify(generateData)});

      if (generateData.message.includes("Files processed and zipped successfully")) {
        setIsSuccess(true);
        setModalMessage("üìÅ Bulletins pr√™ts. V√©rification du fichier ZIP...");
        if (await pollDownloadStatus()) {
          log("‚¨áÔ∏è T√©l√©chargement du fichier ZIP...");
          const link = document.createElement("a");
          link.href = https://bulletins-app.fly.dev/download-zip/bulletins.zip;
          link.setAttribute("download", "bulletins.zip");
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
        } else {
          setIsSuccess(false);
          setModalMessage("Le fichier ZIP n'est pas encore pr√™t.");
        }
      }
    } catch (error) {
      log(‚ùå Erreur: ${error}, true);
      setIsSuccess(false);
      setModalMessage("Erreur lors de la g√©n√©ration.");
    } finally {
      setIsLoading(false);
      websocketRef.current?.close();
    }
  };

  useEffect(() => {
    return () => {
      websocketRef.current?.close();
      websocketRef.current = null;
      log("üõë Fermeture du WebSocket.");
    };
  }, []);

  return (
    <>
      <div className="mt-20 flex flex-col items-center">
        <Bulletin className={cn("max-w-[150px]")} imgSrc="" />
        <h3 className="text-3xl font-bold">Vos documents ont bien √©t√© d√©pos√©s.</h3>

        <Button className="mt-6 px-6" onClick={handleGenerate} disabled={isLoading}>
          {isLoading ? <LoaderCircle className="animate-spin" /> : <>G√©n√©rer vos bulletins <ArrowRight className="h-4 w-4 ml-1.5 inline" /></>}
        </Button>
      </div>

      <LoginModal isOpen={isModalOpen} setIsOpen={setIsModalOpen} title={isLoading ? "G√©n√©ration en cours" : isSuccess ? "F√©licitations" : "Oups"} description={modalMessage}>
        {isLoading && <Progress value={progress} />}
      </LoginModal>
    </>
  );
};

export default DesignPreview;
